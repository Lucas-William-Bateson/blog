[["Map",1,2,9,10],"meta::meta",["Map",3,4,5,6,7,8],"astro-version","5.14.1","content-config-digest","7aa05de577c242b6","astro-config-digest","{\"root\":{},\"srcDir\":{},\"publicDir\":{},\"outDir\":{},\"cacheDir\":{},\"site\":\"https://blog.l3s.me\",\"compressHTML\":true,\"base\":\"/\",\"trailingSlash\":\"ignore\",\"output\":\"static\",\"scopedStyleStrategy\":\"attribute\",\"build\":{\"format\":\"directory\",\"client\":{},\"server\":{},\"assets\":\"_astro\",\"serverEntry\":\"entry.mjs\",\"redirects\":true,\"inlineStylesheets\":\"auto\",\"concurrency\":1},\"server\":{\"open\":false,\"host\":false,\"port\":4321,\"streaming\":true,\"allowedHosts\":[]},\"redirects\":{},\"image\":{\"endpoint\":{\"route\":\"/_image\"},\"service\":{\"entrypoint\":\"astro/assets/services/sharp\",\"config\":{}},\"domains\":[],\"remotePatterns\":[],\"responsiveStyles\":false},\"devToolbar\":{\"enabled\":true},\"markdown\":{\"syntaxHighlight\":{\"type\":\"shiki\",\"excludeLangs\":[\"math\"]},\"shikiConfig\":{\"langs\":[],\"langAlias\":{},\"theme\":\"github-dark\",\"themes\":{},\"wrap\":true,\"transformers\":[]},\"remarkPlugins\":[null],\"rehypePlugins\":[null],\"remarkRehype\":{},\"gfm\":true,\"smartypants\":true},\"security\":{\"checkOrigin\":true},\"env\":{\"schema\":{},\"validateSecrets\":false},\"experimental\":{\"clientPrerender\":false,\"contentIntellisense\":false,\"headingIdCompat\":false,\"preserveScriptOrder\":false,\"liveContentCollections\":false,\"csp\":false,\"staticImportMetaEnv\":false,\"chromeDevtoolsWorkspace\":false,\"failOnPrerenderConflict\":false},\"legacy\":{\"collections\":false}}","blog",["Map",11,12,56,57],"self-hosted-mac-mini",{"id":11,"data":13,"body":25,"filePath":26,"digest":27,"rendered":28,"legacyId":55},{"title":14,"description":15,"pubDate":16,"tags":17,"draft":24},"Homegrown CI/CD on Mac Mini + E-Ink Status Dashboard","How I built a local deployment framework with Docker, GitHub Actions, and a Raspberry Pi e-ink dashboard for real-time monitoring.",["Date","2025-08-16T00:00:00.000Z"],[18,19,20,21,22,23],"DevOps","GitHub Actions","CI/CD","Docker","Self-hosting","Mac Mini",false,"# Tinkering My Way Into CI/CD\n\nA month ago, I stopped reading DevOps tutorials and actually built something: a full deployment stack running on a **Mac Mini at home**, complete with automated CI/CD and a physical **e-ink dashboard** that shows me system status at a glance.\n\nThe interesting parts aren't the Docker configs—it's how everything connects: GitHub Actions triggers deployments via webhooks, Uptime Kuma monitors everything through WebSockets, and a Raspberry Pi e-ink display gives me ambient awareness of what's actually running.\n\n---\n\n## The Foundation\n\nI built [mini-deploy-template](https://github.com/Lucas8448/mini-deploy-template) as a reusable skeleton for containerized apps. It's opinionated but minimal: GitHub Actions workflow, Docker Compose setup, health checks, and environment templates. The key insight was making it parameterized—each new service just needs its own `.env.production` file.\n\n---\n\n## The Pipeline\n\nThe CI workflow is straightforward: on push to main, it builds the Docker image, pushes to my local registry (`localhost:5001`), and triggers a deployment webhook. I also configured a cron schedule to run every 2 hours—even without code changes, this detects drift and ensures containers are healthy.\n\n```yaml\nenv:\n  REGISTRY: localhost:5001\n\nschedule:\n  - cron: \"0 */2 * * *\"\n\njobs:\n  deploy:\n    runs-on: self-hosted\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Build & push\n        run: |\n          docker build -t $REGISTRY/${{ env.APP_NAME }}:latest .\n          docker push $REGISTRY/${{ env.APP_NAME }}:latest\n\n      - name: Trigger deployment\n        run: curl -X POST ${{ secrets.DEPLOY_WEBHOOK_URL }}\n```\n\nThe Mac Mini runs a self-hosted GitHub runner, so deployments happen directly on the box. Health checks are baked into both the Dockerfile and Compose config—if a container fails, Docker restarts it automatically.\n\n---\n\n## The Monitoring Stack\n\nHere's where it gets interesting. The deployment webhook hits an n8n workflow that notifies me as soon as a container is deployed. But n8n does more than just deployments:\n\n**Uptime Kuma** monitors every service endpoint via HTTP checks. When something changes state, it pushes events through a WebSocket feed. n8n ingests that feed and routes alerts to:\n\n- Slack (for immediate notifications)\n- A JSON endpoint on the Mac Mini (for the e-ink dashboard)\n\nThe **e-ink dashboard** is a Raspberry Pi with a low-power e-ink screen. It fetches the JSON endpoint every minute and renders current status: service name, health (green/yellow/red), and uptime. It's always-on, ultra-low power, and gives me that glanceable ambient feedback.\n\nWhen the Mac Mini crashed during a system update, Uptime Kuma detected it within seconds. I got the Slack alert, and my e-ink dashboard showed exactly how long things had been down. That feedback loop pushed me to harden everything—better health checks and smarter restart policies.\n\n---\n\n## What I Learned\n\nBuilding this forced me to think about resilience differently. It's not just \"does it work?\"—it's \"does it recover?\" The cron-scheduled CI runs catch drift. Health checks ensure containers restart. The e-ink display makes downtime visible, which motivates me to fix it faster.\n\n**Next steps:**\n\n- Automatic rollbacks: if a new deploy fails health checks, revert to the last working image\n- Smarter error handling: Automated fixes with n8n and copilot\n- Metrics integration: CPU/memory sparklines on the e-ink display\n\nThis project has become my go-to for deploying new apps fast and easy. If you want to build something similar, start with the [mini-deploy-template](https://github.com/Lucas8448/mini-deploy-template) and iterate from there.","src/content/blog/self-hosted-mac-mini.md","c3571f30cad64b22",{"html":29,"metadata":30},"\u003Ch1 id=\"tinkering-my-way-into-cicd\">Tinkering My Way Into CI/CD\u003C/h1>\n\u003Cp>A month ago, I stopped reading DevOps tutorials and actually built something: a full deployment stack running on a \u003Cstrong>Mac Mini at home\u003C/strong>, complete with automated CI/CD and a physical \u003Cstrong>e-ink dashboard\u003C/strong> that shows me system status at a glance.\u003C/p>\n\u003Cp>The interesting parts aren’t the Docker configs—it’s how everything connects: GitHub Actions triggers deployments via webhooks, Uptime Kuma monitors everything through WebSockets, and a Raspberry Pi e-ink display gives me ambient awareness of what’s actually running.\u003C/p>\n\u003Chr>\n\u003Ch2 id=\"the-foundation\">The Foundation\u003C/h2>\n\u003Cp>I built \u003Ca href=\"https://github.com/Lucas8448/mini-deploy-template\">mini-deploy-template\u003C/a> as a reusable skeleton for containerized apps. It’s opinionated but minimal: GitHub Actions workflow, Docker Compose setup, health checks, and environment templates. The key insight was making it parameterized—each new service just needs its own \u003Ccode>.env.production\u003C/code> file.\u003C/p>\n\u003Chr>\n\u003Ch2 id=\"the-pipeline\">The Pipeline\u003C/h2>\n\u003Cp>The CI workflow is straightforward: on push to main, it builds the Docker image, pushes to my local registry (\u003Ccode>localhost:5001\u003C/code>), and triggers a deployment webhook. I also configured a cron schedule to run every 2 hours—even without code changes, this detects drift and ensures containers are healthy.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"yaml\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">env\u003C/span>\u003Cspan style=\"color:#E1E4E8\">:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">  REGISTRY\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">localhost:5001\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">schedule\u003C/span>\u003Cspan style=\"color:#E1E4E8\">:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  - \u003C/span>\u003Cspan style=\"color:#85E89D\">cron\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"0 */2 * * *\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">jobs\u003C/span>\u003Cspan style=\"color:#E1E4E8\">:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">  deploy\u003C/span>\u003Cspan style=\"color:#E1E4E8\">:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">    runs-on\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">self-hosted\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">    steps\u003C/span>\u003Cspan style=\"color:#E1E4E8\">:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      - \u003C/span>\u003Cspan style=\"color:#85E89D\">uses\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">actions/checkout@v3\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      - \u003C/span>\u003Cspan style=\"color:#85E89D\">name\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">Build &#x26; push\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">        run\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#F97583\">|\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">          docker build -t $REGISTRY/${{ env.APP_NAME }}:latest .\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">          docker push $REGISTRY/${{ env.APP_NAME }}:latest\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      - \u003C/span>\u003Cspan style=\"color:#85E89D\">name\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">Trigger deployment\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">        run\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">curl -X POST ${{ secrets.DEPLOY_WEBHOOK_URL }}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>The Mac Mini runs a self-hosted GitHub runner, so deployments happen directly on the box. Health checks are baked into both the Dockerfile and Compose config—if a container fails, Docker restarts it automatically.\u003C/p>\n\u003Chr>\n\u003Ch2 id=\"the-monitoring-stack\">The Monitoring Stack\u003C/h2>\n\u003Cp>Here’s where it gets interesting. The deployment webhook hits an n8n workflow that notifies me as soon as a container is deployed. But n8n does more than just deployments:\u003C/p>\n\u003Cp>\u003Cstrong>Uptime Kuma\u003C/strong> monitors every service endpoint via HTTP checks. When something changes state, it pushes events through a WebSocket feed. n8n ingests that feed and routes alerts to:\u003C/p>\n\u003Cul>\n\u003Cli>Slack (for immediate notifications)\u003C/li>\n\u003Cli>A JSON endpoint on the Mac Mini (for the e-ink dashboard)\u003C/li>\n\u003C/ul>\n\u003Cp>The \u003Cstrong>e-ink dashboard\u003C/strong> is a Raspberry Pi with a low-power e-ink screen. It fetches the JSON endpoint every minute and renders current status: service name, health (green/yellow/red), and uptime. It’s always-on, ultra-low power, and gives me that glanceable ambient feedback.\u003C/p>\n\u003Cp>When the Mac Mini crashed during a system update, Uptime Kuma detected it within seconds. I got the Slack alert, and my e-ink dashboard showed exactly how long things had been down. That feedback loop pushed me to harden everything—better health checks and smarter restart policies.\u003C/p>\n\u003Chr>\n\u003Ch2 id=\"what-i-learned\">What I Learned\u003C/h2>\n\u003Cp>Building this forced me to think about resilience differently. It’s not just “does it work?”—it’s “does it recover?” The cron-scheduled CI runs catch drift. Health checks ensure containers restart. The e-ink display makes downtime visible, which motivates me to fix it faster.\u003C/p>\n\u003Cp>\u003Cstrong>Next steps:\u003C/strong>\u003C/p>\n\u003Cul>\n\u003Cli>Automatic rollbacks: if a new deploy fails health checks, revert to the last working image\u003C/li>\n\u003Cli>Smarter error handling: Automated fixes with n8n and copilot\u003C/li>\n\u003Cli>Metrics integration: CPU/memory sparklines on the e-ink display\u003C/li>\n\u003C/ul>\n\u003Cp>This project has become my go-to for deploying new apps fast and easy. If you want to build something similar, start with the \u003Ca href=\"https://github.com/Lucas8448/mini-deploy-template\">mini-deploy-template\u003C/a> and iterate from there.\u003C/p>",{"headings":31,"localImagePaths":49,"remoteImagePaths":50,"frontmatter":51,"imagePaths":54},[32,36,40,43,46],{"depth":33,"slug":34,"text":35},1,"tinkering-my-way-into-cicd","Tinkering My Way Into CI/CD",{"depth":37,"slug":38,"text":39},2,"the-foundation","The Foundation",{"depth":37,"slug":41,"text":42},"the-pipeline","The Pipeline",{"depth":37,"slug":44,"text":45},"the-monitoring-stack","The Monitoring Stack",{"depth":37,"slug":47,"text":48},"what-i-learned","What I Learned",[],[],{"title":14,"description":15,"pubDate":52,"tags":53,"draft":24},["Date","2025-08-16T00:00:00.000Z"],[18,19,20,21,22,23],[],"self-hosted-mac-mini.md","rust-n-body",{"id":56,"data":58,"body":66,"filePath":67,"digest":68,"rendered":69,"legacyId":110},{"title":59,"description":60,"pubDate":61,"tags":62,"draft":24},"From Equations to Orbits: Building an N-Body Simulator in Rust","How I went from not knowing Rust to simulating stable planetary systems at high speed using Rust's blend of safety and performance.",["Date","2025-09-24T00:00:00.000Z"],[63,64,65],"Rust","Physics","Simulation","# A \"small\" performance test of Rust\n\nFor a long time, I had heard a lot of great stats and opinions about Rust, but never had the chance to really try it out on a project. I figured I would start out small with something maths and physics heavy, to test the performance against a language I know like Python or Javascript. There are many classic \"small\" projects that are often used to benchmark languages, and one of them is an N-body simulator.\n\nThe concept is straightforward: simulate multiple celestial bodies interacting through Newtonian gravity. However, the implementation and logic is not as it seems.\n\nRepository: [Lucas8448/N-body-simulator](https://github.com/Lucas8448/N-body-simulator)\n\n---\n\n## The Physics Core\n\nWhen I first looked at gravity equations, I'll admit — I was really intimidated. But once I (and ChatGPT Study Mode) broke it down step by step, it clicked. Here's how I understood it.\n\n### Step 1: Understanding Gravity Between Two Objects\n\nNewton figured out that any two objects with mass pull on each other. The force depends on three things:\n\n1. How heavy the first object is (mass $m_i$)\n2. How heavy the second object is (mass $m_j$)\n3. How far apart they are (distance $r$)\n\nThe formula looks scary at first:\n\n$$\nF = G \\frac{m_i m_j}{r^2}\n$$\n\nBut let's decode it:\n\n- $F$ is the strength of the pull between them\n- $G$ is just a tiny constant (gravitational constant ≈ 6.674 × 10⁻¹¹ N·m²/kg² in SI units) that makes the units work out. In bigger simulations you often rescale units, but in this repository I kept the Sun–Earth example in meters, kilograms, and seconds so the familiar number drops straight in.\n- The masses multiply together — heavier objects = stronger pull\n- The distance is **squared** in the denominator — double the distance = quarter the force\n\nThe weirdest part for me was that $r^2$ in the denominator. It means gravity gets weaker really fast as things move apart.\n\n### Step 2: Making It a Vector (Direction Matters)\n\nThat formula only gives us the _strength_ of the force. But force needs a direction too — is the object being pulled left? Up? Diagonally?\n\nThis is where it gets slightly more complex. We need a **unit vector** $\\hat{\\mathbf{r}}_{ij}$ — basically an arrow pointing from object $i$ to object $j$, with length 1.\n\nThe full gravity force becomes:\n\n$$\n\\mathbf{F}_{ij} = G \\frac{m_i m_j}{r^2} \\hat{\\mathbf{r}}_{ij}\n$$\n\n### Step 3: Adding Up All the Forces\n\nHere's where it got messy for me at first. In a simulation with multiple bodies, _every_ object pulls on _every other_ object.\n\nSo for one object (let's call it body $i$), you have to:\n\n1. Calculate the force from body 1 pulling on it\n2. Calculate the force from body 2 pulling on it\n3. Calculate the force from body 3 pulling on it\n4. ...and so on for all other bodies\n\nThen you **add all those force vectors together** to get the total force on body $i$:\n\n$$\n\\mathbf{F}_{\\text{total}} = \\mathbf{F}_{i1} + \\mathbf{F}_{i2} + \\mathbf{F}_{i3} + \\ldots\n$$\n\nOr in compact math notation:\n\n$$\n\\mathbf{F}_{\\text{total}} = \\sum_{j \\ne i} \\mathbf{F}_{ij}\n$$\n\n(The $\\sum$ symbol just means \"add them all up.\" The $j \\ne i$ means \"skip yourself — objects don't pull on themselves.\", very logical from a programming perspective.)\n\n### Step 4: From Force to Acceleration\n\nRemember Newton's second law: $F = ma$? We can rearrange it:\n\n$$\na = \\frac{F}{m}\n$$\n\nSo once we have the total force on an object, we divide by its mass to get its **acceleration** — how much its velocity changes:\n\n$$\n\\mathbf{a}_i = \\frac{1}{m_i} \\sum_{j \\ne i} \\mathbf{F}_{ij}\n$$\n\nHeavier objects accelerate less for the same force. A tiny moon gets whipped around easily. A massive star barely budges.\n\n### The Computational Cost\n\nHere's the catch: if you have $n$ bodies, you need to compute $n \\times (n-1)$ force pairs. That's **O(n²)** — it scales badly. 10 bodies = 90 calculations. 100 bodies = 9,900 calculations. Every single timestep.\n\nFor my first version, I kept it simple and brute-forced the O(n²) approach. It works fine for small systems (~100 bodies). Bigger simulations need tricks like Barnes–Hut trees, but I wasn't ready for that rabbit hole yet.\n\n### The Integration Problem\n\nSo I had the physics down. I knew how to calculate forces. The next question was simple to ask but hard to get right: **how do you actually move things forward in time?**\n\nMy first pass was the textbook Euler integrator:\n\n```\nnew_velocity = old_velocity + acceleration * timestep\nnew_position = old_position + velocity * timestep\n```\n\nIt works, but it also steadily leaks energy into the system. Those runaway orbits were a good reminder that \"simple\" does not mean \"physically accurate.\"\n\nFor this first pass I stayed with the simplest option, plain **forward Euler integration**. It is easy to reason about and only needs the acceleration from the current timestep:\n\n```rust\nfn step(&mut self) {\n    let n = self.bodies.len();\n    let mut accelerations = vec![[0.0, 0.0]; n];\n\n    for i in 0..n {\n        for j in (i + 1)..n {\n            let dx = self.bodies[j].pos[0] - self.bodies[i].pos[0];\n            let dy = self.bodies[j].pos[1] - self.bodies[i].pos[1];\n            let dist_sq = dx * dx + dy * dy;\n            let dist = dist_sq.sqrt();\n\n            if dist == 0.0 {\n                continue;\n            }\n\n            let force = self.g * self.bodies[i].mass * self.bodies[j].mass / dist_sq;\n            let fx = force * dx / dist;\n            let fy = force * dy / dist;\n\n            accelerations[i][0] += fx / self.bodies[i].mass;\n            accelerations[i][1] += fy / self.bodies[i].mass;\n            accelerations[j][0] -= fx / self.bodies[j].mass;\n            accelerations[j][1] -= fy / self.bodies[j].mass;\n        }\n    }\n\n    for i in 0..n {\n        self.bodies[i].vel[0] += accelerations[i][0] * self.dt;\n        self.bodies[i].vel[1] += accelerations[i][1] * self.dt;\n        self.bodies[i].pos[0] += self.bodies[i].vel[0] * self.dt;\n        self.bodies[i].pos[1] += self.bodies[i].vel[1] * self.dt;\n    }\n}\n```\n\nEuler does introduce numerical drift, especially for orbits, so long-term stability is shaky. I kept a short simulation horizon in this repository and logged each step to make the drift obvious. Upgrading to a symplectic integrator like leapfrog is high on the “next iteration” list, but I wanted to keep the baseline version honest about what it currently does.\n\n---\n\n## Rust's Role: Safe Speed\n\nThis is where I really got to see Rust shine. Even with a minimalist `Body` struct that stores positions and velocities as `[f64; 2]` arrays, the ownership rules nudged me toward a tight double loop that shares work between body pairs and avoids aliasing bugs.\n\nKey lessons from Rust here:\n\n- **Borrowing rules** naturally led to the `(i, j)` pairing in the snippet above, so each interaction is computed exactly once.\n- The compiler was happy to optimize the naive math in release mode; I did not need unsafe tricks to get reasonable performance.\n- Pattern matching and enums would make future refactors (e.g., switching to a `Vector2` type) straightforward without sacrificing safety.\n\n---\n\n## Stability, Scale, and Surprises\n\nThe most surprising part wasn't getting it to _run_—it was making it run **stably**.\n\nWith Euler integration, picking a timestep is always a compromise. The example in the repository uses `dt = 10.0` seconds and just two bodies (Sun and Earth) expressed in SI units. A thousand steps only covers about 10,000 seconds—barely a sliver of an Earth year—so you see just the first hint of the orbital arc before numerical drift creeps in.\n\nI do not use gravitational softening yet; the code simply skips interaction if two bodies occupy the exact same spot. That keeps the force finite but effectively lets bodies pass through each other. More elaborate scenarios or larger systems would need both a better integrator and a softening term, so those are on the backlog for the next version.","src/content/blog/rust-n-body.md","39965b41440160e4",{"html":70,"metadata":71},"\u003Ch1 id=\"a-small-performance-test-of-rust\">A “small” performance test of Rust\u003C/h1>\n\u003Cp>For a long time, I had heard a lot of great stats and opinions about Rust, but never had the chance to really try it out on a project. I figured I would start out small with something maths and physics heavy, to test the performance against a language I know like Python or Javascript. There are many classic “small” projects that are often used to benchmark languages, and one of them is an N-body simulator.\u003C/p>\n\u003Cp>The concept is straightforward: simulate multiple celestial bodies interacting through Newtonian gravity. However, the implementation and logic is not as it seems.\u003C/p>\n\u003Cp>Repository: \u003Ca href=\"https://github.com/Lucas8448/N-body-simulator\">Lucas8448/N-body-simulator\u003C/a>\u003C/p>\n\u003Chr>\n\u003Ch2 id=\"the-physics-core\">The Physics Core\u003C/h2>\n\u003Cp>When I first looked at gravity equations, I’ll admit — I was really intimidated. But once I (and ChatGPT Study Mode) broke it down step by step, it clicked. Here’s how I understood it.\u003C/p>\n\u003Ch3 id=\"step-1-understanding-gravity-between-two-objects\">Step 1: Understanding Gravity Between Two Objects\u003C/h3>\n\u003Cp>Newton figured out that any two objects with mass pull on each other. The force depends on three things:\u003C/p>\n\u003Col>\n\u003Cli>How heavy the first object is (mass \u003Cspan class=\"katex\">\u003Cspan class=\"katex-mathml\">\u003Cmath xmlns=\"http://www.w3.org/1998/Math/MathML\">\u003Csemantics>\u003Cmrow>\u003Cmsub>\u003Cmi>m\u003C/mi>\u003Cmi>i\u003C/mi>\u003C/msub>\u003C/mrow>\u003Cannotation encoding=\"application/x-tex\">m_i\u003C/annotation>\u003C/semantics>\u003C/math>\u003C/span>\u003Cspan class=\"katex-html\" aria-hidden=\"true\">\u003Cspan class=\"base\">\u003Cspan class=\"strut\" style=\"height:0.5806em;vertical-align:-0.15em;\">\u003C/span>\u003Cspan class=\"mord\">\u003Cspan class=\"mord mathnormal\">m\u003C/span>\u003Cspan class=\"msupsub\">\u003Cspan class=\"vlist-t vlist-t2\">\u003Cspan class=\"vlist-r\">\u003Cspan class=\"vlist\" style=\"height:0.3117em;\">\u003Cspan style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\">\u003Cspan class=\"pstrut\" style=\"height:2.7em;\">\u003C/span>\u003Cspan class=\"sizing reset-size6 size3 mtight\">\u003Cspan class=\"mord mathnormal mtight\">i\u003C/span>\u003C/span>\u003C/span>\u003C/span>\u003Cspan class=\"vlist-s\">​\u003C/span>\u003C/span>\u003Cspan class=\"vlist-r\">\u003Cspan class=\"vlist\" style=\"height:0.15em;\">\u003Cspan>\u003C/span>\u003C/span>\u003C/span>\u003C/span>\u003C/span>\u003C/span>\u003C/span>\u003C/span>\u003C/span>)\u003C/li>\n\u003Cli>How heavy the second object is (mass \u003Cspan class=\"katex\">\u003Cspan class=\"katex-mathml\">\u003Cmath xmlns=\"http://www.w3.org/1998/Math/MathML\">\u003Csemantics>\u003Cmrow>\u003Cmsub>\u003Cmi>m\u003C/mi>\u003Cmi>j\u003C/mi>\u003C/msub>\u003C/mrow>\u003Cannotation encoding=\"application/x-tex\">m_j\u003C/annotation>\u003C/semantics>\u003C/math>\u003C/span>\u003Cspan class=\"katex-html\" aria-hidden=\"true\">\u003Cspan class=\"base\">\u003Cspan class=\"strut\" style=\"height:0.7167em;vertical-align:-0.2861em;\">\u003C/span>\u003Cspan class=\"mord\">\u003Cspan class=\"mord mathnormal\">m\u003C/span>\u003Cspan class=\"msupsub\">\u003Cspan class=\"vlist-t vlist-t2\">\u003Cspan class=\"vlist-r\">\u003Cspan class=\"vlist\" style=\"height:0.3117em;\">\u003Cspan style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\">\u003Cspan class=\"pstrut\" style=\"height:2.7em;\">\u003C/span>\u003Cspan class=\"sizing reset-size6 size3 mtight\">\u003Cspan class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j\u003C/span>\u003C/span>\u003C/span>\u003C/span>\u003Cspan class=\"vlist-s\">​\u003C/span>\u003C/span>\u003Cspan class=\"vlist-r\">\u003Cspan class=\"vlist\" style=\"height:0.2861em;\">\u003Cspan>\u003C/span>\u003C/span>\u003C/span>\u003C/span>\u003C/span>\u003C/span>\u003C/span>\u003C/span>\u003C/span>)\u003C/li>\n\u003Cli>How far apart they are (distance \u003Cspan class=\"katex\">\u003Cspan class=\"katex-mathml\">\u003Cmath xmlns=\"http://www.w3.org/1998/Math/MathML\">\u003Csemantics>\u003Cmrow>\u003Cmi>r\u003C/mi>\u003C/mrow>\u003Cannotation encoding=\"application/x-tex\">r\u003C/annotation>\u003C/semantics>\u003C/math>\u003C/span>\u003Cspan class=\"katex-html\" aria-hidden=\"true\">\u003Cspan class=\"base\">\u003Cspan class=\"strut\" style=\"height:0.4306em;\">\u003C/span>\u003Cspan class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r\u003C/span>\u003C/span>\u003C/span>\u003C/span>)\u003C/li>\n\u003C/ol>\n\u003Cp>The formula looks scary at first:\u003C/p>\n\u003Cspan class=\"katex-display\">\u003Cspan class=\"katex\">\u003Cspan class=\"katex-mathml\">\u003Cmath xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\">\u003Csemantics>\u003Cmrow>\u003Cmi>F\u003C/mi>\u003Cmo>=\u003C/mo>\u003Cmi>G\u003C/mi>\u003Cmfrac>\u003Cmrow>\u003Cmsub>\u003Cmi>m\u003C/mi>\u003Cmi>i\u003C/mi>\u003C/msub>\u003Cmsub>\u003Cmi>m\u003C/mi>\u003Cmi>j\u003C/mi>\u003C/msub>\u003C/mrow>\u003Cmsup>\u003Cmi>r\u003C/mi>\u003Cmn>2\u003C/mn>\u003C/msup>\u003C/mfrac>\u003C/mrow>\u003Cannotation encoding=\"application/x-tex\">F = G \\frac{m_i m_j}{r^2}\u003C/annotation>\u003C/semantics>\u003C/math>\u003C/span>\u003Cspan class=\"katex-html\" aria-hidden=\"true\">\u003Cspan class=\"base\">\u003Cspan class=\"strut\" style=\"height:0.6833em;\">\u003C/span>\u003Cspan class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F\u003C/span>\u003Cspan class=\"mspace\" style=\"margin-right:0.2778em;\">\u003C/span>\u003Cspan class=\"mrel\">=\u003C/span>\u003Cspan class=\"mspace\" style=\"margin-right:0.2778em;\">\u003C/span>\u003C/span>\u003Cspan class=\"base\">\u003Cspan class=\"strut\" style=\"height:1.7936em;vertical-align:-0.686em;\">\u003C/span>\u003Cspan class=\"mord mathnormal\">G\u003C/span>\u003Cspan class=\"mord\">\u003Cspan class=\"mopen nulldelimiter\">\u003C/span>\u003Cspan class=\"mfrac\">\u003Cspan class=\"vlist-t vlist-t2\">\u003Cspan class=\"vlist-r\">\u003Cspan class=\"vlist\" style=\"height:1.1076em;\">\u003Cspan style=\"top:-2.314em;\">\u003Cspan class=\"pstrut\" style=\"height:3em;\">\u003C/span>\u003Cspan class=\"mord\">\u003Cspan class=\"mord\">\u003Cspan class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r\u003C/span>\u003Cspan class=\"msupsub\">\u003Cspan class=\"vlist-t\">\u003Cspan class=\"vlist-r\">\u003Cspan class=\"vlist\" style=\"height:0.7401em;\">\u003Cspan style=\"top:-2.989em;margin-right:0.05em;\">\u003Cspan class=\"pstrut\" style=\"height:2.7em;\">\u003C/span>\u003Cspan class=\"sizing reset-size6 size3 mtight\">\u003Cspan class=\"mord mtight\">2\u003C/span>\u003C/span>\u003C/span>\u003C/span>\u003C/span>\u003C/span>\u003C/span>\u003C/span>\u003C/span>\u003C/span>\u003Cspan style=\"top:-3.23em;\">\u003Cspan class=\"pstrut\" style=\"height:3em;\">\u003C/span>\u003Cspan class=\"frac-line\" style=\"border-bottom-width:0.04em;\">\u003C/span>\u003C/span>\u003Cspan style=\"top:-3.677em;\">\u003Cspan class=\"pstrut\" style=\"height:3em;\">\u003C/span>\u003Cspan class=\"mord\">\u003Cspan class=\"mord\">\u003Cspan class=\"mord mathnormal\">m\u003C/span>\u003Cspan class=\"msupsub\">\u003Cspan class=\"vlist-t vlist-t2\">\u003Cspan class=\"vlist-r\">\u003Cspan class=\"vlist\" style=\"height:0.3117em;\">\u003Cspan style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\">\u003Cspan class=\"pstrut\" style=\"height:2.7em;\">\u003C/span>\u003Cspan class=\"sizing reset-size6 size3 mtight\">\u003Cspan class=\"mord mathnormal mtight\">i\u003C/span>\u003C/span>\u003C/span>\u003C/span>\u003Cspan class=\"vlist-s\">​\u003C/span>\u003C/span>\u003Cspan class=\"vlist-r\">\u003Cspan class=\"vlist\" style=\"height:0.15em;\">\u003Cspan>\u003C/span>\u003C/span>\u003C/span>\u003C/span>\u003C/span>\u003C/span>\u003Cspan class=\"mord\">\u003Cspan class=\"mord mathnormal\">m\u003C/span>\u003Cspan class=\"msupsub\">\u003Cspan class=\"vlist-t vlist-t2\">\u003Cspan class=\"vlist-r\">\u003Cspan class=\"vlist\" style=\"height:0.3117em;\">\u003Cspan style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\">\u003Cspan class=\"pstrut\" style=\"height:2.7em;\">\u003C/span>\u003Cspan class=\"sizing reset-size6 size3 mtight\">\u003Cspan class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j\u003C/span>\u003C/span>\u003C/span>\u003C/span>\u003Cspan class=\"vlist-s\">​\u003C/span>\u003C/span>\u003Cspan class=\"vlist-r\">\u003Cspan class=\"vlist\" style=\"height:0.2861em;\">\u003Cspan>\u003C/span>\u003C/span>\u003C/span>\u003C/span>\u003C/span>\u003C/span>\u003C/span>\u003C/span>\u003C/span>\u003Cspan class=\"vlist-s\">​\u003C/span>\u003C/span>\u003Cspan class=\"vlist-r\">\u003Cspan class=\"vlist\" style=\"height:0.686em;\">\u003Cspan>\u003C/span>\u003C/span>\u003C/span>\u003C/span>\u003C/span>\u003Cspan class=\"mclose nulldelimiter\">\u003C/span>\u003C/span>\u003C/span>\u003C/span>\u003C/span>\u003C/span>\n\u003Cp>But let’s decode it:\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cspan class=\"katex\">\u003Cspan class=\"katex-mathml\">\u003Cmath xmlns=\"http://www.w3.org/1998/Math/MathML\">\u003Csemantics>\u003Cmrow>\u003Cmi>F\u003C/mi>\u003C/mrow>\u003Cannotation encoding=\"application/x-tex\">F\u003C/annotation>\u003C/semantics>\u003C/math>\u003C/span>\u003Cspan class=\"katex-html\" aria-hidden=\"true\">\u003Cspan class=\"base\">\u003Cspan class=\"strut\" style=\"height:0.6833em;\">\u003C/span>\u003Cspan class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F\u003C/span>\u003C/span>\u003C/span>\u003C/span> is the strength of the pull between them\u003C/li>\n\u003Cli>\u003Cspan class=\"katex\">\u003Cspan class=\"katex-mathml\">\u003Cmath xmlns=\"http://www.w3.org/1998/Math/MathML\">\u003Csemantics>\u003Cmrow>\u003Cmi>G\u003C/mi>\u003C/mrow>\u003Cannotation encoding=\"application/x-tex\">G\u003C/annotation>\u003C/semantics>\u003C/math>\u003C/span>\u003Cspan class=\"katex-html\" aria-hidden=\"true\">\u003Cspan class=\"base\">\u003Cspan class=\"strut\" style=\"height:0.6833em;\">\u003C/span>\u003Cspan class=\"mord mathnormal\">G\u003C/span>\u003C/span>\u003C/span>\u003C/span> is just a tiny constant (gravitational constant ≈ 6.674 × 10⁻¹¹ N·m²/kg² in SI units) that makes the units work out. In bigger simulations you often rescale units, but in this repository I kept the Sun–Earth example in meters, kilograms, and seconds so the familiar number drops straight in.\u003C/li>\n\u003Cli>The masses multiply together — heavier objects = stronger pull\u003C/li>\n\u003Cli>The distance is \u003Cstrong>squared\u003C/strong> in the denominator — double the distance = quarter the force\u003C/li>\n\u003C/ul>\n\u003Cp>The weirdest part for me was that \u003Cspan class=\"katex\">\u003Cspan class=\"katex-mathml\">\u003Cmath xmlns=\"http://www.w3.org/1998/Math/MathML\">\u003Csemantics>\u003Cmrow>\u003Cmsup>\u003Cmi>r\u003C/mi>\u003Cmn>2\u003C/mn>\u003C/msup>\u003C/mrow>\u003Cannotation encoding=\"application/x-tex\">r^2\u003C/annotation>\u003C/semantics>\u003C/math>\u003C/span>\u003Cspan class=\"katex-html\" aria-hidden=\"true\">\u003Cspan class=\"base\">\u003Cspan class=\"strut\" style=\"height:0.8141em;\">\u003C/span>\u003Cspan class=\"mord\">\u003Cspan class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r\u003C/span>\u003Cspan class=\"msupsub\">\u003Cspan class=\"vlist-t\">\u003Cspan class=\"vlist-r\">\u003Cspan class=\"vlist\" style=\"height:0.8141em;\">\u003Cspan style=\"top:-3.063em;margin-right:0.05em;\">\u003Cspan class=\"pstrut\" style=\"height:2.7em;\">\u003C/span>\u003Cspan class=\"sizing reset-size6 size3 mtight\">\u003Cspan class=\"mord mtight\">2\u003C/span>\u003C/span>\u003C/span>\u003C/span>\u003C/span>\u003C/span>\u003C/span>\u003C/span>\u003C/span>\u003C/span>\u003C/span> in the denominator. It means gravity gets weaker really fast as things move apart.\u003C/p>\n\u003Ch3 id=\"step-2-making-it-a-vector-direction-matters\">Step 2: Making It a Vector (Direction Matters)\u003C/h3>\n\u003Cp>That formula only gives us the \u003Cem>strength\u003C/em> of the force. But force needs a direction too — is the object being pulled left? Up? Diagonally?\u003C/p>\n\u003Cp>This is where it gets slightly more complex. We need a \u003Cstrong>unit vector\u003C/strong> \u003Cspan class=\"katex\">\u003Cspan class=\"katex-mathml\">\u003Cmath xmlns=\"http://www.w3.org/1998/Math/MathML\">\u003Csemantics>\u003Cmrow>\u003Cmsub>\u003Cmover accent=\"true\">\u003Cmi mathvariant=\"bold\">r\u003C/mi>\u003Cmo>^\u003C/mo>\u003C/mover>\u003Cmrow>\u003Cmi>i\u003C/mi>\u003Cmi>j\u003C/mi>\u003C/mrow>\u003C/msub>\u003C/mrow>\u003Cannotation encoding=\"application/x-tex\">\\hat{\\mathbf{r}}_{ij}\u003C/annotation>\u003C/semantics>\u003C/math>\u003C/span>\u003Cspan class=\"katex-html\" aria-hidden=\"true\">\u003Cspan class=\"base\">\u003Cspan class=\"strut\" style=\"height:0.994em;vertical-align:-0.2861em;\">\u003C/span>\u003Cspan class=\"mord\">\u003Cspan class=\"mord accent\">\u003Cspan class=\"vlist-t\">\u003Cspan class=\"vlist-r\">\u003Cspan class=\"vlist\" style=\"height:0.7079em;\">\u003Cspan style=\"top:-3em;\">\u003Cspan class=\"pstrut\" style=\"height:3em;\">\u003C/span>\u003Cspan class=\"mord mathbf\">r\u003C/span>\u003C/span>\u003Cspan style=\"top:-3.0134em;\">\u003Cspan class=\"pstrut\" style=\"height:3em;\">\u003C/span>\u003Cspan class=\"accent-body\" style=\"left:-0.1944em;\">\u003Cspan class=\"mord\">^\u003C/span>\u003C/span>\u003C/span>\u003C/span>\u003C/span>\u003C/span>\u003C/span>\u003Cspan class=\"msupsub\">\u003Cspan class=\"vlist-t vlist-t2\">\u003Cspan class=\"vlist-r\">\u003Cspan class=\"vlist\" style=\"height:0.3117em;\">\u003Cspan style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\">\u003Cspan class=\"pstrut\" style=\"height:2.7em;\">\u003C/span>\u003Cspan class=\"sizing reset-size6 size3 mtight\">\u003Cspan class=\"mord mtight\">\u003Cspan class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">ij\u003C/span>\u003C/span>\u003C/span>\u003C/span>\u003C/span>\u003Cspan class=\"vlist-s\">​\u003C/span>\u003C/span>\u003Cspan class=\"vlist-r\">\u003Cspan class=\"vlist\" style=\"height:0.2861em;\">\u003Cspan>\u003C/span>\u003C/span>\u003C/span>\u003C/span>\u003C/span>\u003C/span>\u003C/span>\u003C/span>\u003C/span> — basically an arrow pointing from object \u003Cspan class=\"katex\">\u003Cspan class=\"katex-mathml\">\u003Cmath xmlns=\"http://www.w3.org/1998/Math/MathML\">\u003Csemantics>\u003Cmrow>\u003Cmi>i\u003C/mi>\u003C/mrow>\u003Cannotation encoding=\"application/x-tex\">i\u003C/annotation>\u003C/semantics>\u003C/math>\u003C/span>\u003Cspan class=\"katex-html\" aria-hidden=\"true\">\u003Cspan class=\"base\">\u003Cspan class=\"strut\" style=\"height:0.6595em;\">\u003C/span>\u003Cspan class=\"mord mathnormal\">i\u003C/span>\u003C/span>\u003C/span>\u003C/span> to object \u003Cspan class=\"katex\">\u003Cspan class=\"katex-mathml\">\u003Cmath xmlns=\"http://www.w3.org/1998/Math/MathML\">\u003Csemantics>\u003Cmrow>\u003Cmi>j\u003C/mi>\u003C/mrow>\u003Cannotation encoding=\"application/x-tex\">j\u003C/annotation>\u003C/semantics>\u003C/math>\u003C/span>\u003Cspan class=\"katex-html\" aria-hidden=\"true\">\u003Cspan class=\"base\">\u003Cspan class=\"strut\" style=\"height:0.854em;vertical-align:-0.1944em;\">\u003C/span>\u003Cspan class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j\u003C/span>\u003C/span>\u003C/span>\u003C/span>, with length 1.\u003C/p>\n\u003Cp>The full gravity force becomes:\u003C/p>\n\u003Cspan class=\"katex-display\">\u003Cspan class=\"katex\">\u003Cspan class=\"katex-mathml\">\u003Cmath xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\">\u003Csemantics>\u003Cmrow>\u003Cmsub>\u003Cmi mathvariant=\"bold\">F\u003C/mi>\u003Cmrow>\u003Cmi>i\u003C/mi>\u003Cmi>j\u003C/mi>\u003C/mrow>\u003C/msub>\u003Cmo>=\u003C/mo>\u003Cmi>G\u003C/mi>\u003Cmfrac>\u003Cmrow>\u003Cmsub>\u003Cmi>m\u003C/mi>\u003Cmi>i\u003C/mi>\u003C/msub>\u003Cmsub>\u003Cmi>m\u003C/mi>\u003Cmi>j\u003C/mi>\u003C/msub>\u003C/mrow>\u003Cmsup>\u003Cmi>r\u003C/mi>\u003Cmn>2\u003C/mn>\u003C/msup>\u003C/mfrac>\u003Cmsub>\u003Cmover accent=\"true\">\u003Cmi mathvariant=\"bold\">r\u003C/mi>\u003Cmo>^\u003C/mo>\u003C/mover>\u003Cmrow>\u003Cmi>i\u003C/mi>\u003Cmi>j\u003C/mi>\u003C/mrow>\u003C/msub>\u003C/mrow>\u003Cannotation encoding=\"application/x-tex\">\\mathbf{F}_{ij} = G \\frac{m_i m_j}{r^2} \\hat{\\mathbf{r}}_{ij}\u003C/annotation>\u003C/semantics>\u003C/math>\u003C/span>\u003Cspan class=\"katex-html\" aria-hidden=\"true\">\u003Cspan class=\"base\">\u003Cspan class=\"strut\" style=\"height:0.9722em;vertical-align:-0.2861em;\">\u003C/span>\u003Cspan class=\"mord\">\u003Cspan class=\"mord mathbf\">F\u003C/span>\u003Cspan class=\"msupsub\">\u003Cspan class=\"vlist-t vlist-t2\">\u003Cspan class=\"vlist-r\">\u003Cspan class=\"vlist\" style=\"height:0.3117em;\">\u003Cspan style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\">\u003Cspan class=\"pstrut\" style=\"height:2.7em;\">\u003C/span>\u003Cspan class=\"sizing reset-size6 size3 mtight\">\u003Cspan class=\"mord mtight\">\u003Cspan class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">ij\u003C/span>\u003C/span>\u003C/span>\u003C/span>\u003C/span>\u003Cspan class=\"vlist-s\">​\u003C/span>\u003C/span>\u003Cspan class=\"vlist-r\">\u003Cspan class=\"vlist\" style=\"height:0.2861em;\">\u003Cspan>\u003C/span>\u003C/span>\u003C/span>\u003C/span>\u003C/span>\u003C/span>\u003Cspan class=\"mspace\" style=\"margin-right:0.2778em;\">\u003C/span>\u003Cspan class=\"mrel\">=\u003C/span>\u003Cspan class=\"mspace\" style=\"margin-right:0.2778em;\">\u003C/span>\u003C/span>\u003Cspan class=\"base\">\u003Cspan class=\"strut\" style=\"height:1.7936em;vertical-align:-0.686em;\">\u003C/span>\u003Cspan class=\"mord mathnormal\">G\u003C/span>\u003Cspan class=\"mord\">\u003Cspan class=\"mopen nulldelimiter\">\u003C/span>\u003Cspan class=\"mfrac\">\u003Cspan class=\"vlist-t vlist-t2\">\u003Cspan class=\"vlist-r\">\u003Cspan class=\"vlist\" style=\"height:1.1076em;\">\u003Cspan style=\"top:-2.314em;\">\u003Cspan class=\"pstrut\" style=\"height:3em;\">\u003C/span>\u003Cspan class=\"mord\">\u003Cspan class=\"mord\">\u003Cspan class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r\u003C/span>\u003Cspan class=\"msupsub\">\u003Cspan class=\"vlist-t\">\u003Cspan class=\"vlist-r\">\u003Cspan class=\"vlist\" style=\"height:0.7401em;\">\u003Cspan style=\"top:-2.989em;margin-right:0.05em;\">\u003Cspan class=\"pstrut\" style=\"height:2.7em;\">\u003C/span>\u003Cspan class=\"sizing reset-size6 size3 mtight\">\u003Cspan class=\"mord mtight\">2\u003C/span>\u003C/span>\u003C/span>\u003C/span>\u003C/span>\u003C/span>\u003C/span>\u003C/span>\u003C/span>\u003C/span>\u003Cspan style=\"top:-3.23em;\">\u003Cspan class=\"pstrut\" style=\"height:3em;\">\u003C/span>\u003Cspan class=\"frac-line\" style=\"border-bottom-width:0.04em;\">\u003C/span>\u003C/span>\u003Cspan style=\"top:-3.677em;\">\u003Cspan class=\"pstrut\" style=\"height:3em;\">\u003C/span>\u003Cspan class=\"mord\">\u003Cspan class=\"mord\">\u003Cspan class=\"mord mathnormal\">m\u003C/span>\u003Cspan class=\"msupsub\">\u003Cspan class=\"vlist-t vlist-t2\">\u003Cspan class=\"vlist-r\">\u003Cspan class=\"vlist\" style=\"height:0.3117em;\">\u003Cspan style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\">\u003Cspan class=\"pstrut\" style=\"height:2.7em;\">\u003C/span>\u003Cspan class=\"sizing reset-size6 size3 mtight\">\u003Cspan class=\"mord mathnormal mtight\">i\u003C/span>\u003C/span>\u003C/span>\u003C/span>\u003Cspan class=\"vlist-s\">​\u003C/span>\u003C/span>\u003Cspan class=\"vlist-r\">\u003Cspan class=\"vlist\" style=\"height:0.15em;\">\u003Cspan>\u003C/span>\u003C/span>\u003C/span>\u003C/span>\u003C/span>\u003C/span>\u003Cspan class=\"mord\">\u003Cspan class=\"mord mathnormal\">m\u003C/span>\u003Cspan class=\"msupsub\">\u003Cspan class=\"vlist-t vlist-t2\">\u003Cspan class=\"vlist-r\">\u003Cspan class=\"vlist\" style=\"height:0.3117em;\">\u003Cspan style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\">\u003Cspan class=\"pstrut\" style=\"height:2.7em;\">\u003C/span>\u003Cspan class=\"sizing reset-size6 size3 mtight\">\u003Cspan class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j\u003C/span>\u003C/span>\u003C/span>\u003C/span>\u003Cspan class=\"vlist-s\">​\u003C/span>\u003C/span>\u003Cspan class=\"vlist-r\">\u003Cspan class=\"vlist\" style=\"height:0.2861em;\">\u003Cspan>\u003C/span>\u003C/span>\u003C/span>\u003C/span>\u003C/span>\u003C/span>\u003C/span>\u003C/span>\u003C/span>\u003Cspan class=\"vlist-s\">​\u003C/span>\u003C/span>\u003Cspan class=\"vlist-r\">\u003Cspan class=\"vlist\" style=\"height:0.686em;\">\u003Cspan>\u003C/span>\u003C/span>\u003C/span>\u003C/span>\u003C/span>\u003Cspan class=\"mclose nulldelimiter\">\u003C/span>\u003C/span>\u003Cspan class=\"mord\">\u003Cspan class=\"mord accent\">\u003Cspan class=\"vlist-t\">\u003Cspan class=\"vlist-r\">\u003Cspan class=\"vlist\" style=\"height:0.7079em;\">\u003Cspan style=\"top:-3em;\">\u003Cspan class=\"pstrut\" style=\"height:3em;\">\u003C/span>\u003Cspan class=\"mord mathbf\">r\u003C/span>\u003C/span>\u003Cspan style=\"top:-3.0134em;\">\u003Cspan class=\"pstrut\" style=\"height:3em;\">\u003C/span>\u003Cspan class=\"accent-body\" style=\"left:-0.1944em;\">\u003Cspan class=\"mord\">^\u003C/span>\u003C/span>\u003C/span>\u003C/span>\u003C/span>\u003C/span>\u003C/span>\u003Cspan class=\"msupsub\">\u003Cspan class=\"vlist-t vlist-t2\">\u003Cspan class=\"vlist-r\">\u003Cspan class=\"vlist\" style=\"height:0.3117em;\">\u003Cspan style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\">\u003Cspan class=\"pstrut\" style=\"height:2.7em;\">\u003C/span>\u003Cspan class=\"sizing reset-size6 size3 mtight\">\u003Cspan class=\"mord mtight\">\u003Cspan class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">ij\u003C/span>\u003C/span>\u003C/span>\u003C/span>\u003C/span>\u003Cspan class=\"vlist-s\">​\u003C/span>\u003C/span>\u003Cspan class=\"vlist-r\">\u003Cspan class=\"vlist\" style=\"height:0.2861em;\">\u003Cspan>\u003C/span>\u003C/span>\u003C/span>\u003C/span>\u003C/span>\u003C/span>\u003C/span>\u003C/span>\u003C/span>\u003C/span>\n\u003Ch3 id=\"step-3-adding-up-all-the-forces\">Step 3: Adding Up All the Forces\u003C/h3>\n\u003Cp>Here’s where it got messy for me at first. In a simulation with multiple bodies, \u003Cem>every\u003C/em> object pulls on \u003Cem>every other\u003C/em> object.\u003C/p>\n\u003Cp>So for one object (let’s call it body \u003Cspan class=\"katex\">\u003Cspan class=\"katex-mathml\">\u003Cmath xmlns=\"http://www.w3.org/1998/Math/MathML\">\u003Csemantics>\u003Cmrow>\u003Cmi>i\u003C/mi>\u003C/mrow>\u003Cannotation encoding=\"application/x-tex\">i\u003C/annotation>\u003C/semantics>\u003C/math>\u003C/span>\u003Cspan class=\"katex-html\" aria-hidden=\"true\">\u003Cspan class=\"base\">\u003Cspan class=\"strut\" style=\"height:0.6595em;\">\u003C/span>\u003Cspan class=\"mord mathnormal\">i\u003C/span>\u003C/span>\u003C/span>\u003C/span>), you have to:\u003C/p>\n\u003Col>\n\u003Cli>Calculate the force from body 1 pulling on it\u003C/li>\n\u003Cli>Calculate the force from body 2 pulling on it\u003C/li>\n\u003Cli>Calculate the force from body 3 pulling on it\u003C/li>\n\u003Cli>…and so on for all other bodies\u003C/li>\n\u003C/ol>\n\u003Cp>Then you \u003Cstrong>add all those force vectors together\u003C/strong> to get the total force on body \u003Cspan class=\"katex\">\u003Cspan class=\"katex-mathml\">\u003Cmath xmlns=\"http://www.w3.org/1998/Math/MathML\">\u003Csemantics>\u003Cmrow>\u003Cmi>i\u003C/mi>\u003C/mrow>\u003Cannotation encoding=\"application/x-tex\">i\u003C/annotation>\u003C/semantics>\u003C/math>\u003C/span>\u003Cspan class=\"katex-html\" aria-hidden=\"true\">\u003Cspan class=\"base\">\u003Cspan class=\"strut\" style=\"height:0.6595em;\">\u003C/span>\u003Cspan class=\"mord mathnormal\">i\u003C/span>\u003C/span>\u003C/span>\u003C/span>:\u003C/p>\n\u003Cspan class=\"katex-display\">\u003Cspan class=\"katex\">\u003Cspan class=\"katex-mathml\">\u003Cmath xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\">\u003Csemantics>\u003Cmrow>\u003Cmsub>\u003Cmi mathvariant=\"bold\">F\u003C/mi>\u003Cmtext>total\u003C/mtext>\u003C/msub>\u003Cmo>=\u003C/mo>\u003Cmsub>\u003Cmi mathvariant=\"bold\">F\u003C/mi>\u003Cmrow>\u003Cmi>i\u003C/mi>\u003Cmn>1\u003C/mn>\u003C/mrow>\u003C/msub>\u003Cmo>+\u003C/mo>\u003Cmsub>\u003Cmi mathvariant=\"bold\">F\u003C/mi>\u003Cmrow>\u003Cmi>i\u003C/mi>\u003Cmn>2\u003C/mn>\u003C/mrow>\u003C/msub>\u003Cmo>+\u003C/mo>\u003Cmsub>\u003Cmi mathvariant=\"bold\">F\u003C/mi>\u003Cmrow>\u003Cmi>i\u003C/mi>\u003Cmn>3\u003C/mn>\u003C/mrow>\u003C/msub>\u003Cmo>+\u003C/mo>\u003Cmo>…\u003C/mo>\u003C/mrow>\u003Cannotation encoding=\"application/x-tex\">\\mathbf{F}_{\\text{total}} = \\mathbf{F}_{i1} + \\mathbf{F}_{i2} + \\mathbf{F}_{i3} + \\ldots\u003C/annotation>\u003C/semantics>\u003C/math>\u003C/span>\u003Cspan class=\"katex-html\" aria-hidden=\"true\">\u003Cspan class=\"base\">\u003Cspan class=\"strut\" style=\"height:0.8361em;vertical-align:-0.15em;\">\u003C/span>\u003Cspan class=\"mord\">\u003Cspan class=\"mord mathbf\">F\u003C/span>\u003Cspan class=\"msupsub\">\u003Cspan class=\"vlist-t vlist-t2\">\u003Cspan class=\"vlist-r\">\u003Cspan class=\"vlist\" style=\"height:0.3361em;\">\u003Cspan style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\">\u003Cspan class=\"pstrut\" style=\"height:2.7em;\">\u003C/span>\u003Cspan class=\"sizing reset-size6 size3 mtight\">\u003Cspan class=\"mord mtight\">\u003Cspan class=\"mord text mtight\">\u003Cspan class=\"mord mtight\">total\u003C/span>\u003C/span>\u003C/span>\u003C/span>\u003C/span>\u003C/span>\u003Cspan class=\"vlist-s\">​\u003C/span>\u003C/span>\u003Cspan class=\"vlist-r\">\u003Cspan class=\"vlist\" style=\"height:0.15em;\">\u003Cspan>\u003C/span>\u003C/span>\u003C/span>\u003C/span>\u003C/span>\u003C/span>\u003Cspan class=\"mspace\" style=\"margin-right:0.2778em;\">\u003C/span>\u003Cspan class=\"mrel\">=\u003C/span>\u003Cspan class=\"mspace\" style=\"margin-right:0.2778em;\">\u003C/span>\u003C/span>\u003Cspan class=\"base\">\u003Cspan class=\"strut\" style=\"height:0.8361em;vertical-align:-0.15em;\">\u003C/span>\u003Cspan class=\"mord\">\u003Cspan class=\"mord mathbf\">F\u003C/span>\u003Cspan class=\"msupsub\">\u003Cspan class=\"vlist-t vlist-t2\">\u003Cspan class=\"vlist-r\">\u003Cspan class=\"vlist\" style=\"height:0.3117em;\">\u003Cspan style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\">\u003Cspan class=\"pstrut\" style=\"height:2.7em;\">\u003C/span>\u003Cspan class=\"sizing reset-size6 size3 mtight\">\u003Cspan class=\"mord mtight\">\u003Cspan class=\"mord mathnormal mtight\">i\u003C/span>\u003Cspan class=\"mord mtight\">1\u003C/span>\u003C/span>\u003C/span>\u003C/span>\u003C/span>\u003Cspan class=\"vlist-s\">​\u003C/span>\u003C/span>\u003Cspan class=\"vlist-r\">\u003Cspan class=\"vlist\" style=\"height:0.15em;\">\u003Cspan>\u003C/span>\u003C/span>\u003C/span>\u003C/span>\u003C/span>\u003C/span>\u003Cspan class=\"mspace\" style=\"margin-right:0.2222em;\">\u003C/span>\u003Cspan class=\"mbin\">+\u003C/span>\u003Cspan class=\"mspace\" style=\"margin-right:0.2222em;\">\u003C/span>\u003C/span>\u003Cspan class=\"base\">\u003Cspan class=\"strut\" style=\"height:0.8361em;vertical-align:-0.15em;\">\u003C/span>\u003Cspan class=\"mord\">\u003Cspan class=\"mord mathbf\">F\u003C/span>\u003Cspan class=\"msupsub\">\u003Cspan class=\"vlist-t vlist-t2\">\u003Cspan class=\"vlist-r\">\u003Cspan class=\"vlist\" style=\"height:0.3117em;\">\u003Cspan style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\">\u003Cspan class=\"pstrut\" style=\"height:2.7em;\">\u003C/span>\u003Cspan class=\"sizing reset-size6 size3 mtight\">\u003Cspan class=\"mord mtight\">\u003Cspan class=\"mord mathnormal mtight\">i\u003C/span>\u003Cspan class=\"mord mtight\">2\u003C/span>\u003C/span>\u003C/span>\u003C/span>\u003C/span>\u003Cspan class=\"vlist-s\">​\u003C/span>\u003C/span>\u003Cspan class=\"vlist-r\">\u003Cspan class=\"vlist\" style=\"height:0.15em;\">\u003Cspan>\u003C/span>\u003C/span>\u003C/span>\u003C/span>\u003C/span>\u003C/span>\u003Cspan class=\"mspace\" style=\"margin-right:0.2222em;\">\u003C/span>\u003Cspan class=\"mbin\">+\u003C/span>\u003Cspan class=\"mspace\" style=\"margin-right:0.2222em;\">\u003C/span>\u003C/span>\u003Cspan class=\"base\">\u003Cspan class=\"strut\" style=\"height:0.8361em;vertical-align:-0.15em;\">\u003C/span>\u003Cspan class=\"mord\">\u003Cspan class=\"mord mathbf\">F\u003C/span>\u003Cspan class=\"msupsub\">\u003Cspan class=\"vlist-t vlist-t2\">\u003Cspan class=\"vlist-r\">\u003Cspan class=\"vlist\" style=\"height:0.3117em;\">\u003Cspan style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\">\u003Cspan class=\"pstrut\" style=\"height:2.7em;\">\u003C/span>\u003Cspan class=\"sizing reset-size6 size3 mtight\">\u003Cspan class=\"mord mtight\">\u003Cspan class=\"mord mathnormal mtight\">i\u003C/span>\u003Cspan class=\"mord mtight\">3\u003C/span>\u003C/span>\u003C/span>\u003C/span>\u003C/span>\u003Cspan class=\"vlist-s\">​\u003C/span>\u003C/span>\u003Cspan class=\"vlist-r\">\u003Cspan class=\"vlist\" style=\"height:0.15em;\">\u003Cspan>\u003C/span>\u003C/span>\u003C/span>\u003C/span>\u003C/span>\u003C/span>\u003Cspan class=\"mspace\" style=\"margin-right:0.2222em;\">\u003C/span>\u003Cspan class=\"mbin\">+\u003C/span>\u003Cspan class=\"mspace\" style=\"margin-right:0.2222em;\">\u003C/span>\u003C/span>\u003Cspan class=\"base\">\u003Cspan class=\"strut\" style=\"height:0.123em;\">\u003C/span>\u003Cspan class=\"minner\">…\u003C/span>\u003C/span>\u003C/span>\u003C/span>\u003C/span>\n\u003Cp>Or in compact math notation:\u003C/p>\n\u003Cspan class=\"katex-display\">\u003Cspan class=\"katex\">\u003Cspan class=\"katex-mathml\">\u003Cmath xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\">\u003Csemantics>\u003Cmrow>\u003Cmsub>\u003Cmi mathvariant=\"bold\">F\u003C/mi>\u003Cmtext>total\u003C/mtext>\u003C/msub>\u003Cmo>=\u003C/mo>\u003Cmunder>\u003Cmo>∑\u003C/mo>\u003Cmrow>\u003Cmi>j\u003C/mi>\u003Cmo mathvariant=\"normal\">≠\u003C/mo>\u003Cmi>i\u003C/mi>\u003C/mrow>\u003C/munder>\u003Cmsub>\u003Cmi mathvariant=\"bold\">F\u003C/mi>\u003Cmrow>\u003Cmi>i\u003C/mi>\u003Cmi>j\u003C/mi>\u003C/mrow>\u003C/msub>\u003C/mrow>\u003Cannotation encoding=\"application/x-tex\">\\mathbf{F}_{\\text{total}} = \\sum_{j \\ne i} \\mathbf{F}_{ij}\u003C/annotation>\u003C/semantics>\u003C/math>\u003C/span>\u003Cspan class=\"katex-html\" aria-hidden=\"true\">\u003Cspan class=\"base\">\u003Cspan class=\"strut\" style=\"height:0.8361em;vertical-align:-0.15em;\">\u003C/span>\u003Cspan class=\"mord\">\u003Cspan class=\"mord mathbf\">F\u003C/span>\u003Cspan class=\"msupsub\">\u003Cspan class=\"vlist-t vlist-t2\">\u003Cspan class=\"vlist-r\">\u003Cspan class=\"vlist\" style=\"height:0.3361em;\">\u003Cspan style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\">\u003Cspan class=\"pstrut\" style=\"height:2.7em;\">\u003C/span>\u003Cspan class=\"sizing reset-size6 size3 mtight\">\u003Cspan class=\"mord mtight\">\u003Cspan class=\"mord text mtight\">\u003Cspan class=\"mord mtight\">total\u003C/span>\u003C/span>\u003C/span>\u003C/span>\u003C/span>\u003C/span>\u003Cspan class=\"vlist-s\">​\u003C/span>\u003C/span>\u003Cspan class=\"vlist-r\">\u003Cspan class=\"vlist\" style=\"height:0.15em;\">\u003Cspan>\u003C/span>\u003C/span>\u003C/span>\u003C/span>\u003C/span>\u003C/span>\u003Cspan class=\"mspace\" style=\"margin-right:0.2778em;\">\u003C/span>\u003Cspan class=\"mrel\">=\u003C/span>\u003Cspan class=\"mspace\" style=\"margin-right:0.2778em;\">\u003C/span>\u003C/span>\u003Cspan class=\"base\">\u003Cspan class=\"strut\" style=\"height:2.4882em;vertical-align:-1.4382em;\">\u003C/span>\u003Cspan class=\"mop op-limits\">\u003Cspan class=\"vlist-t vlist-t2\">\u003Cspan class=\"vlist-r\">\u003Cspan class=\"vlist\" style=\"height:1.05em;\">\u003Cspan style=\"top:-1.8479em;margin-left:0em;\">\u003Cspan class=\"pstrut\" style=\"height:3.05em;\">\u003C/span>\u003Cspan class=\"sizing reset-size6 size3 mtight\">\u003Cspan class=\"mord mtight\">\u003Cspan class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j\u003C/span>\u003Cspan class=\"mrel mtight\">\u003Cspan class=\"mrel mtight\">\u003Cspan class=\"mord vbox mtight\">\u003Cspan class=\"thinbox mtight\">\u003Cspan class=\"rlap mtight\">\u003Cspan class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\">\u003C/span>\u003Cspan class=\"inner\">\u003Cspan class=\"mord mtight\">\u003Cspan class=\"mrel mtight\">\u003C/span>\u003C/span>\u003C/span>\u003Cspan class=\"fix\">\u003C/span>\u003C/span>\u003C/span>\u003C/span>\u003C/span>\u003Cspan class=\"mrel mtight\">=\u003C/span>\u003C/span>\u003Cspan class=\"mord mathnormal mtight\">i\u003C/span>\u003C/span>\u003C/span>\u003C/span>\u003Cspan style=\"top:-3.05em;\">\u003Cspan class=\"pstrut\" style=\"height:3.05em;\">\u003C/span>\u003Cspan>\u003Cspan class=\"mop op-symbol large-op\">∑\u003C/span>\u003C/span>\u003C/span>\u003C/span>\u003Cspan class=\"vlist-s\">​\u003C/span>\u003C/span>\u003Cspan class=\"vlist-r\">\u003Cspan class=\"vlist\" style=\"height:1.4382em;\">\u003Cspan>\u003C/span>\u003C/span>\u003C/span>\u003C/span>\u003C/span>\u003Cspan class=\"mspace\" style=\"margin-right:0.1667em;\">\u003C/span>\u003Cspan class=\"mord\">\u003Cspan class=\"mord mathbf\">F\u003C/span>\u003Cspan class=\"msupsub\">\u003Cspan class=\"vlist-t vlist-t2\">\u003Cspan class=\"vlist-r\">\u003Cspan class=\"vlist\" style=\"height:0.3117em;\">\u003Cspan style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\">\u003Cspan class=\"pstrut\" style=\"height:2.7em;\">\u003C/span>\u003Cspan class=\"sizing reset-size6 size3 mtight\">\u003Cspan class=\"mord mtight\">\u003Cspan class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">ij\u003C/span>\u003C/span>\u003C/span>\u003C/span>\u003C/span>\u003Cspan class=\"vlist-s\">​\u003C/span>\u003C/span>\u003Cspan class=\"vlist-r\">\u003Cspan class=\"vlist\" style=\"height:0.2861em;\">\u003Cspan>\u003C/span>\u003C/span>\u003C/span>\u003C/span>\u003C/span>\u003C/span>\u003C/span>\u003C/span>\u003C/span>\u003C/span>\n\u003Cp>(The \u003Cspan class=\"katex\">\u003Cspan class=\"katex-mathml\">\u003Cmath xmlns=\"http://www.w3.org/1998/Math/MathML\">\u003Csemantics>\u003Cmrow>\u003Cmo>∑\u003C/mo>\u003C/mrow>\u003Cannotation encoding=\"application/x-tex\">\\sum\u003C/annotation>\u003C/semantics>\u003C/math>\u003C/span>\u003Cspan class=\"katex-html\" aria-hidden=\"true\">\u003Cspan class=\"base\">\u003Cspan class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\">\u003C/span>\u003Cspan class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∑\u003C/span>\u003C/span>\u003C/span>\u003C/span> symbol just means “add them all up.” The \u003Cspan class=\"katex\">\u003Cspan class=\"katex-mathml\">\u003Cmath xmlns=\"http://www.w3.org/1998/Math/MathML\">\u003Csemantics>\u003Cmrow>\u003Cmi>j\u003C/mi>\u003Cmo mathvariant=\"normal\">≠\u003C/mo>\u003Cmi>i\u003C/mi>\u003C/mrow>\u003Cannotation encoding=\"application/x-tex\">j \\ne i\u003C/annotation>\u003C/semantics>\u003C/math>\u003C/span>\u003Cspan class=\"katex-html\" aria-hidden=\"true\">\u003Cspan class=\"base\">\u003Cspan class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\">\u003C/span>\u003Cspan class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j\u003C/span>\u003Cspan class=\"mspace\" style=\"margin-right:0.2778em;\">\u003C/span>\u003Cspan class=\"mrel\">\u003Cspan class=\"mrel\">\u003Cspan class=\"mord vbox\">\u003Cspan class=\"thinbox\">\u003Cspan class=\"rlap\">\u003Cspan class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\">\u003C/span>\u003Cspan class=\"inner\">\u003Cspan class=\"mord\">\u003Cspan class=\"mrel\">\u003C/span>\u003C/span>\u003C/span>\u003Cspan class=\"fix\">\u003C/span>\u003C/span>\u003C/span>\u003C/span>\u003C/span>\u003Cspan class=\"mrel\">=\u003C/span>\u003C/span>\u003Cspan class=\"mspace\" style=\"margin-right:0.2778em;\">\u003C/span>\u003C/span>\u003Cspan class=\"base\">\u003Cspan class=\"strut\" style=\"height:0.6595em;\">\u003C/span>\u003Cspan class=\"mord mathnormal\">i\u003C/span>\u003C/span>\u003C/span>\u003C/span> means “skip yourself — objects don’t pull on themselves.”, very logical from a programming perspective.)\u003C/p>\n\u003Ch3 id=\"step-4-from-force-to-acceleration\">Step 4: From Force to Acceleration\u003C/h3>\n\u003Cp>Remember Newton’s second law: \u003Cspan class=\"katex\">\u003Cspan class=\"katex-mathml\">\u003Cmath xmlns=\"http://www.w3.org/1998/Math/MathML\">\u003Csemantics>\u003Cmrow>\u003Cmi>F\u003C/mi>\u003Cmo>=\u003C/mo>\u003Cmi>m\u003C/mi>\u003Cmi>a\u003C/mi>\u003C/mrow>\u003Cannotation encoding=\"application/x-tex\">F = ma\u003C/annotation>\u003C/semantics>\u003C/math>\u003C/span>\u003Cspan class=\"katex-html\" aria-hidden=\"true\">\u003Cspan class=\"base\">\u003Cspan class=\"strut\" style=\"height:0.6833em;\">\u003C/span>\u003Cspan class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F\u003C/span>\u003Cspan class=\"mspace\" style=\"margin-right:0.2778em;\">\u003C/span>\u003Cspan class=\"mrel\">=\u003C/span>\u003Cspan class=\"mspace\" style=\"margin-right:0.2778em;\">\u003C/span>\u003C/span>\u003Cspan class=\"base\">\u003Cspan class=\"strut\" style=\"height:0.4306em;\">\u003C/span>\u003Cspan class=\"mord mathnormal\">ma\u003C/span>\u003C/span>\u003C/span>\u003C/span>? We can rearrange it:\u003C/p>\n\u003Cspan class=\"katex-display\">\u003Cspan class=\"katex\">\u003Cspan class=\"katex-mathml\">\u003Cmath xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\">\u003Csemantics>\u003Cmrow>\u003Cmi>a\u003C/mi>\u003Cmo>=\u003C/mo>\u003Cmfrac>\u003Cmi>F\u003C/mi>\u003Cmi>m\u003C/mi>\u003C/mfrac>\u003C/mrow>\u003Cannotation encoding=\"application/x-tex\">a = \\frac{F}{m}\u003C/annotation>\u003C/semantics>\u003C/math>\u003C/span>\u003Cspan class=\"katex-html\" aria-hidden=\"true\">\u003Cspan class=\"base\">\u003Cspan class=\"strut\" style=\"height:0.4306em;\">\u003C/span>\u003Cspan class=\"mord mathnormal\">a\u003C/span>\u003Cspan class=\"mspace\" style=\"margin-right:0.2778em;\">\u003C/span>\u003Cspan class=\"mrel\">=\u003C/span>\u003Cspan class=\"mspace\" style=\"margin-right:0.2778em;\">\u003C/span>\u003C/span>\u003Cspan class=\"base\">\u003Cspan class=\"strut\" style=\"height:2.0463em;vertical-align:-0.686em;\">\u003C/span>\u003Cspan class=\"mord\">\u003Cspan class=\"mopen nulldelimiter\">\u003C/span>\u003Cspan class=\"mfrac\">\u003Cspan class=\"vlist-t vlist-t2\">\u003Cspan class=\"vlist-r\">\u003Cspan class=\"vlist\" style=\"height:1.3603em;\">\u003Cspan style=\"top:-2.314em;\">\u003Cspan class=\"pstrut\" style=\"height:3em;\">\u003C/span>\u003Cspan class=\"mord\">\u003Cspan class=\"mord mathnormal\">m\u003C/span>\u003C/span>\u003C/span>\u003Cspan style=\"top:-3.23em;\">\u003Cspan class=\"pstrut\" style=\"height:3em;\">\u003C/span>\u003Cspan class=\"frac-line\" style=\"border-bottom-width:0.04em;\">\u003C/span>\u003C/span>\u003Cspan style=\"top:-3.677em;\">\u003Cspan class=\"pstrut\" style=\"height:3em;\">\u003C/span>\u003Cspan class=\"mord\">\u003Cspan class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F\u003C/span>\u003C/span>\u003C/span>\u003C/span>\u003Cspan class=\"vlist-s\">​\u003C/span>\u003C/span>\u003Cspan class=\"vlist-r\">\u003Cspan class=\"vlist\" style=\"height:0.686em;\">\u003Cspan>\u003C/span>\u003C/span>\u003C/span>\u003C/span>\u003C/span>\u003Cspan class=\"mclose nulldelimiter\">\u003C/span>\u003C/span>\u003C/span>\u003C/span>\u003C/span>\u003C/span>\n\u003Cp>So once we have the total force on an object, we divide by its mass to get its \u003Cstrong>acceleration\u003C/strong> — how much its velocity changes:\u003C/p>\n\u003Cspan class=\"katex-display\">\u003Cspan class=\"katex\">\u003Cspan class=\"katex-mathml\">\u003Cmath xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\">\u003Csemantics>\u003Cmrow>\u003Cmsub>\u003Cmi mathvariant=\"bold\">a\u003C/mi>\u003Cmi>i\u003C/mi>\u003C/msub>\u003Cmo>=\u003C/mo>\u003Cmfrac>\u003Cmn>1\u003C/mn>\u003Cmsub>\u003Cmi>m\u003C/mi>\u003Cmi>i\u003C/mi>\u003C/msub>\u003C/mfrac>\u003Cmunder>\u003Cmo>∑\u003C/mo>\u003Cmrow>\u003Cmi>j\u003C/mi>\u003Cmo mathvariant=\"normal\">≠\u003C/mo>\u003Cmi>i\u003C/mi>\u003C/mrow>\u003C/munder>\u003Cmsub>\u003Cmi mathvariant=\"bold\">F\u003C/mi>\u003Cmrow>\u003Cmi>i\u003C/mi>\u003Cmi>j\u003C/mi>\u003C/mrow>\u003C/msub>\u003C/mrow>\u003Cannotation encoding=\"application/x-tex\">\\mathbf{a}_i = \\frac{1}{m_i} \\sum_{j \\ne i} \\mathbf{F}_{ij}\u003C/annotation>\u003C/semantics>\u003C/math>\u003C/span>\u003Cspan class=\"katex-html\" aria-hidden=\"true\">\u003Cspan class=\"base\">\u003Cspan class=\"strut\" style=\"height:0.5944em;vertical-align:-0.15em;\">\u003C/span>\u003Cspan class=\"mord\">\u003Cspan class=\"mord mathbf\">a\u003C/span>\u003Cspan class=\"msupsub\">\u003Cspan class=\"vlist-t vlist-t2\">\u003Cspan class=\"vlist-r\">\u003Cspan class=\"vlist\" style=\"height:0.3117em;\">\u003Cspan style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\">\u003Cspan class=\"pstrut\" style=\"height:2.7em;\">\u003C/span>\u003Cspan class=\"sizing reset-size6 size3 mtight\">\u003Cspan class=\"mord mathnormal mtight\">i\u003C/span>\u003C/span>\u003C/span>\u003C/span>\u003Cspan class=\"vlist-s\">​\u003C/span>\u003C/span>\u003Cspan class=\"vlist-r\">\u003Cspan class=\"vlist\" style=\"height:0.15em;\">\u003Cspan>\u003C/span>\u003C/span>\u003C/span>\u003C/span>\u003C/span>\u003C/span>\u003Cspan class=\"mspace\" style=\"margin-right:0.2778em;\">\u003C/span>\u003Cspan class=\"mrel\">=\u003C/span>\u003Cspan class=\"mspace\" style=\"margin-right:0.2778em;\">\u003C/span>\u003C/span>\u003Cspan class=\"base\">\u003Cspan class=\"strut\" style=\"height:2.7597em;vertical-align:-1.4382em;\">\u003C/span>\u003Cspan class=\"mord\">\u003Cspan class=\"mopen nulldelimiter\">\u003C/span>\u003Cspan class=\"mfrac\">\u003Cspan class=\"vlist-t vlist-t2\">\u003Cspan class=\"vlist-r\">\u003Cspan class=\"vlist\" style=\"height:1.3214em;\">\u003Cspan style=\"top:-2.314em;\">\u003Cspan class=\"pstrut\" style=\"height:3em;\">\u003C/span>\u003Cspan class=\"mord\">\u003Cspan class=\"mord\">\u003Cspan class=\"mord mathnormal\">m\u003C/span>\u003Cspan class=\"msupsub\">\u003Cspan class=\"vlist-t vlist-t2\">\u003Cspan class=\"vlist-r\">\u003Cspan class=\"vlist\" style=\"height:0.3117em;\">\u003Cspan style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\">\u003Cspan class=\"pstrut\" style=\"height:2.7em;\">\u003C/span>\u003Cspan class=\"sizing reset-size6 size3 mtight\">\u003Cspan class=\"mord mathnormal mtight\">i\u003C/span>\u003C/span>\u003C/span>\u003C/span>\u003Cspan class=\"vlist-s\">​\u003C/span>\u003C/span>\u003Cspan class=\"vlist-r\">\u003Cspan class=\"vlist\" style=\"height:0.15em;\">\u003Cspan>\u003C/span>\u003C/span>\u003C/span>\u003C/span>\u003C/span>\u003C/span>\u003C/span>\u003C/span>\u003Cspan style=\"top:-3.23em;\">\u003Cspan class=\"pstrut\" style=\"height:3em;\">\u003C/span>\u003Cspan class=\"frac-line\" style=\"border-bottom-width:0.04em;\">\u003C/span>\u003C/span>\u003Cspan style=\"top:-3.677em;\">\u003Cspan class=\"pstrut\" style=\"height:3em;\">\u003C/span>\u003Cspan class=\"mord\">\u003Cspan class=\"mord\">1\u003C/span>\u003C/span>\u003C/span>\u003C/span>\u003Cspan class=\"vlist-s\">​\u003C/span>\u003C/span>\u003Cspan class=\"vlist-r\">\u003Cspan class=\"vlist\" style=\"height:0.836em;\">\u003Cspan>\u003C/span>\u003C/span>\u003C/span>\u003C/span>\u003C/span>\u003Cspan class=\"mclose nulldelimiter\">\u003C/span>\u003C/span>\u003Cspan class=\"mspace\" style=\"margin-right:0.1667em;\">\u003C/span>\u003Cspan class=\"mop op-limits\">\u003Cspan class=\"vlist-t vlist-t2\">\u003Cspan class=\"vlist-r\">\u003Cspan class=\"vlist\" style=\"height:1.05em;\">\u003Cspan style=\"top:-1.8479em;margin-left:0em;\">\u003Cspan class=\"pstrut\" style=\"height:3.05em;\">\u003C/span>\u003Cspan class=\"sizing reset-size6 size3 mtight\">\u003Cspan class=\"mord mtight\">\u003Cspan class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j\u003C/span>\u003Cspan class=\"mrel mtight\">\u003Cspan class=\"mrel mtight\">\u003Cspan class=\"mord vbox mtight\">\u003Cspan class=\"thinbox mtight\">\u003Cspan class=\"rlap mtight\">\u003Cspan class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\">\u003C/span>\u003Cspan class=\"inner\">\u003Cspan class=\"mord mtight\">\u003Cspan class=\"mrel mtight\">\u003C/span>\u003C/span>\u003C/span>\u003Cspan class=\"fix\">\u003C/span>\u003C/span>\u003C/span>\u003C/span>\u003C/span>\u003Cspan class=\"mrel mtight\">=\u003C/span>\u003C/span>\u003Cspan class=\"mord mathnormal mtight\">i\u003C/span>\u003C/span>\u003C/span>\u003C/span>\u003Cspan style=\"top:-3.05em;\">\u003Cspan class=\"pstrut\" style=\"height:3.05em;\">\u003C/span>\u003Cspan>\u003Cspan class=\"mop op-symbol large-op\">∑\u003C/span>\u003C/span>\u003C/span>\u003C/span>\u003Cspan class=\"vlist-s\">​\u003C/span>\u003C/span>\u003Cspan class=\"vlist-r\">\u003Cspan class=\"vlist\" style=\"height:1.4382em;\">\u003Cspan>\u003C/span>\u003C/span>\u003C/span>\u003C/span>\u003C/span>\u003Cspan class=\"mspace\" style=\"margin-right:0.1667em;\">\u003C/span>\u003Cspan class=\"mord\">\u003Cspan class=\"mord mathbf\">F\u003C/span>\u003Cspan class=\"msupsub\">\u003Cspan class=\"vlist-t vlist-t2\">\u003Cspan class=\"vlist-r\">\u003Cspan class=\"vlist\" style=\"height:0.3117em;\">\u003Cspan style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\">\u003Cspan class=\"pstrut\" style=\"height:2.7em;\">\u003C/span>\u003Cspan class=\"sizing reset-size6 size3 mtight\">\u003Cspan class=\"mord mtight\">\u003Cspan class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">ij\u003C/span>\u003C/span>\u003C/span>\u003C/span>\u003C/span>\u003Cspan class=\"vlist-s\">​\u003C/span>\u003C/span>\u003Cspan class=\"vlist-r\">\u003Cspan class=\"vlist\" style=\"height:0.2861em;\">\u003Cspan>\u003C/span>\u003C/span>\u003C/span>\u003C/span>\u003C/span>\u003C/span>\u003C/span>\u003C/span>\u003C/span>\u003C/span>\n\u003Cp>Heavier objects accelerate less for the same force. A tiny moon gets whipped around easily. A massive star barely budges.\u003C/p>\n\u003Ch3 id=\"the-computational-cost\">The Computational Cost\u003C/h3>\n\u003Cp>Here’s the catch: if you have \u003Cspan class=\"katex\">\u003Cspan class=\"katex-mathml\">\u003Cmath xmlns=\"http://www.w3.org/1998/Math/MathML\">\u003Csemantics>\u003Cmrow>\u003Cmi>n\u003C/mi>\u003C/mrow>\u003Cannotation encoding=\"application/x-tex\">n\u003C/annotation>\u003C/semantics>\u003C/math>\u003C/span>\u003Cspan class=\"katex-html\" aria-hidden=\"true\">\u003Cspan class=\"base\">\u003Cspan class=\"strut\" style=\"height:0.4306em;\">\u003C/span>\u003Cspan class=\"mord mathnormal\">n\u003C/span>\u003C/span>\u003C/span>\u003C/span> bodies, you need to compute \u003Cspan class=\"katex\">\u003Cspan class=\"katex-mathml\">\u003Cmath xmlns=\"http://www.w3.org/1998/Math/MathML\">\u003Csemantics>\u003Cmrow>\u003Cmi>n\u003C/mi>\u003Cmo>×\u003C/mo>\u003Cmo stretchy=\"false\">(\u003C/mo>\u003Cmi>n\u003C/mi>\u003Cmo>−\u003C/mo>\u003Cmn>1\u003C/mn>\u003Cmo stretchy=\"false\">)\u003C/mo>\u003C/mrow>\u003Cannotation encoding=\"application/x-tex\">n \\times (n-1)\u003C/annotation>\u003C/semantics>\u003C/math>\u003C/span>\u003Cspan class=\"katex-html\" aria-hidden=\"true\">\u003Cspan class=\"base\">\u003Cspan class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\">\u003C/span>\u003Cspan class=\"mord mathnormal\">n\u003C/span>\u003Cspan class=\"mspace\" style=\"margin-right:0.2222em;\">\u003C/span>\u003Cspan class=\"mbin\">×\u003C/span>\u003Cspan class=\"mspace\" style=\"margin-right:0.2222em;\">\u003C/span>\u003C/span>\u003Cspan class=\"base\">\u003Cspan class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\">\u003C/span>\u003Cspan class=\"mopen\">(\u003C/span>\u003Cspan class=\"mord mathnormal\">n\u003C/span>\u003Cspan class=\"mspace\" style=\"margin-right:0.2222em;\">\u003C/span>\u003Cspan class=\"mbin\">−\u003C/span>\u003Cspan class=\"mspace\" style=\"margin-right:0.2222em;\">\u003C/span>\u003C/span>\u003Cspan class=\"base\">\u003Cspan class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\">\u003C/span>\u003Cspan class=\"mord\">1\u003C/span>\u003Cspan class=\"mclose\">)\u003C/span>\u003C/span>\u003C/span>\u003C/span> force pairs. That’s \u003Cstrong>O(n²)\u003C/strong> — it scales badly. 10 bodies = 90 calculations. 100 bodies = 9,900 calculations. Every single timestep.\u003C/p>\n\u003Cp>For my first version, I kept it simple and brute-forced the O(n²) approach. It works fine for small systems (~100 bodies). Bigger simulations need tricks like Barnes–Hut trees, but I wasn’t ready for that rabbit hole yet.\u003C/p>\n\u003Ch3 id=\"the-integration-problem\">The Integration Problem\u003C/h3>\n\u003Cp>So I had the physics down. I knew how to calculate forces. The next question was simple to ask but hard to get right: \u003Cstrong>how do you actually move things forward in time?\u003C/strong>\u003C/p>\n\u003Cp>My first pass was the textbook Euler integrator:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"plaintext\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>new_velocity = old_velocity + acceleration * timestep\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>new_position = old_position + velocity * timestep\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>It works, but it also steadily leaks energy into the system. Those runaway orbits were a good reminder that “simple” does not mean “physically accurate.”\u003C/p>\n\u003Cp>For this first pass I stayed with the simplest option, plain \u003Cstrong>forward Euler integration\u003C/strong>. It is easy to reason about and only needs the acceleration from the current timestep:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"rust\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">fn\u003C/span>\u003Cspan style=\"color:#B392F0\"> step\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#F97583\">&#x26;mut\u003C/span>\u003Cspan style=\"color:#79B8FF\"> self\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> n \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> self\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">bodies\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">len\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#F97583\"> mut\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> accelerations \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> vec!\u003C/span>\u003Cspan style=\"color:#E1E4E8\">[[\u003C/span>\u003Cspan style=\"color:#79B8FF\">0.0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">0.0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">]; n];\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    for\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> i \u003C/span>\u003Cspan style=\"color:#F97583\">in\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#F97583\">..\u003C/span>\u003Cspan style=\"color:#E1E4E8\">n {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        for\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> j \u003C/span>\u003Cspan style=\"color:#F97583\">in\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (i \u003C/span>\u003Cspan style=\"color:#F97583\">+\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003Cspan style=\"color:#F97583\">..\u003C/span>\u003Cspan style=\"color:#E1E4E8\">n {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">            let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> dx \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> self\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">bodies[j]\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">pos[\u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">-\u003C/span>\u003Cspan style=\"color:#79B8FF\"> self\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">bodies[i]\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">pos[\u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">];\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">            let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> dy \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> self\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">bodies[j]\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">pos[\u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">-\u003C/span>\u003Cspan style=\"color:#79B8FF\"> self\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">bodies[i]\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">pos[\u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">];\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">            let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> dist_sq \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> dx \u003C/span>\u003Cspan style=\"color:#F97583\">*\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> dx \u003C/span>\u003Cspan style=\"color:#F97583\">+\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> dy \u003C/span>\u003Cspan style=\"color:#F97583\">*\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> dy;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">            let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> dist \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> dist_sq\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">sqrt\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">            if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> dist \u003C/span>\u003Cspan style=\"color:#F97583\">==\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 0.0\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">                continue\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">            let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> force \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> self\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">g \u003C/span>\u003Cspan style=\"color:#F97583\">*\u003C/span>\u003Cspan style=\"color:#79B8FF\"> self\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">bodies[i]\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">mass \u003C/span>\u003Cspan style=\"color:#F97583\">*\u003C/span>\u003Cspan style=\"color:#79B8FF\"> self\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">bodies[j]\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">mass \u003C/span>\u003Cspan style=\"color:#F97583\">/\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> dist_sq;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">            let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> fx \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> force \u003C/span>\u003Cspan style=\"color:#F97583\">*\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> dx \u003C/span>\u003Cspan style=\"color:#F97583\">/\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> dist;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">            let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> fy \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> force \u003C/span>\u003Cspan style=\"color:#F97583\">*\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> dy \u003C/span>\u003Cspan style=\"color:#F97583\">/\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> dist;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            accelerations[i][\u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">+=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> fx \u003C/span>\u003Cspan style=\"color:#F97583\">/\u003C/span>\u003Cspan style=\"color:#79B8FF\"> self\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">bodies[i]\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">mass;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            accelerations[i][\u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">+=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> fy \u003C/span>\u003Cspan style=\"color:#F97583\">/\u003C/span>\u003Cspan style=\"color:#79B8FF\"> self\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">bodies[i]\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">mass;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            accelerations[j][\u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">-=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> fx \u003C/span>\u003Cspan style=\"color:#F97583\">/\u003C/span>\u003Cspan style=\"color:#79B8FF\"> self\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">bodies[j]\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">mass;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            accelerations[j][\u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">-=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> fy \u003C/span>\u003Cspan style=\"color:#F97583\">/\u003C/span>\u003Cspan style=\"color:#79B8FF\"> self\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">bodies[j]\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">mass;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    for\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> i \u003C/span>\u003Cspan style=\"color:#F97583\">in\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#F97583\">..\u003C/span>\u003Cspan style=\"color:#E1E4E8\">n {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">        self\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">bodies[i]\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">vel[\u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">+=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> accelerations[i][\u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">*\u003C/span>\u003Cspan style=\"color:#79B8FF\"> self\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">dt;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">        self\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">bodies[i]\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">vel[\u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">+=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> accelerations[i][\u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">*\u003C/span>\u003Cspan style=\"color:#79B8FF\"> self\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">dt;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">        self\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">bodies[i]\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">pos[\u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">+=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> self\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">bodies[i]\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">vel[\u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">*\u003C/span>\u003Cspan style=\"color:#79B8FF\"> self\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">dt;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">        self\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">bodies[i]\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">pos[\u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">+=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> self\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">bodies[i]\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">vel[\u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">*\u003C/span>\u003Cspan style=\"color:#79B8FF\"> self\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">dt;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Euler does introduce numerical drift, especially for orbits, so long-term stability is shaky. I kept a short simulation horizon in this repository and logged each step to make the drift obvious. Upgrading to a symplectic integrator like leapfrog is high on the “next iteration” list, but I wanted to keep the baseline version honest about what it currently does.\u003C/p>\n\u003Chr>\n\u003Ch2 id=\"rusts-role-safe-speed\">Rust’s Role: Safe Speed\u003C/h2>\n\u003Cp>This is where I really got to see Rust shine. Even with a minimalist \u003Ccode>Body\u003C/code> struct that stores positions and velocities as \u003Ccode>[f64; 2]\u003C/code> arrays, the ownership rules nudged me toward a tight double loop that shares work between body pairs and avoids aliasing bugs.\u003C/p>\n\u003Cp>Key lessons from Rust here:\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>Borrowing rules\u003C/strong> naturally led to the \u003Ccode>(i, j)\u003C/code> pairing in the snippet above, so each interaction is computed exactly once.\u003C/li>\n\u003Cli>The compiler was happy to optimize the naive math in release mode; I did not need unsafe tricks to get reasonable performance.\u003C/li>\n\u003Cli>Pattern matching and enums would make future refactors (e.g., switching to a \u003Ccode>Vector2\u003C/code> type) straightforward without sacrificing safety.\u003C/li>\n\u003C/ul>\n\u003Chr>\n\u003Ch2 id=\"stability-scale-and-surprises\">Stability, Scale, and Surprises\u003C/h2>\n\u003Cp>The most surprising part wasn’t getting it to \u003Cem>run\u003C/em>—it was making it run \u003Cstrong>stably\u003C/strong>.\u003C/p>\n\u003Cp>With Euler integration, picking a timestep is always a compromise. The example in the repository uses \u003Ccode>dt = 10.0\u003C/code> seconds and just two bodies (Sun and Earth) expressed in SI units. A thousand steps only covers about 10,000 seconds—barely a sliver of an Earth year—so you see just the first hint of the orbital arc before numerical drift creeps in.\u003C/p>\n\u003Cp>I do not use gravitational softening yet; the code simply skips interaction if two bodies occupy the exact same spot. That keeps the force finite but effectively lets bodies pass through each other. More elaborate scenarios or larger systems would need both a better integrator and a softening term, so those are on the backlog for the next version.\u003C/p>",{"headings":72,"localImagePaths":104,"remoteImagePaths":105,"frontmatter":106,"imagePaths":109},[73,76,79,83,86,89,92,95,98,101],{"depth":33,"slug":74,"text":75},"a-small-performance-test-of-rust","A “small” performance test of Rust",{"depth":37,"slug":77,"text":78},"the-physics-core","The Physics Core",{"depth":80,"slug":81,"text":82},3,"step-1-understanding-gravity-between-two-objects","Step 1: Understanding Gravity Between Two Objects",{"depth":80,"slug":84,"text":85},"step-2-making-it-a-vector-direction-matters","Step 2: Making It a Vector (Direction Matters)",{"depth":80,"slug":87,"text":88},"step-3-adding-up-all-the-forces","Step 3: Adding Up All the Forces",{"depth":80,"slug":90,"text":91},"step-4-from-force-to-acceleration","Step 4: From Force to Acceleration",{"depth":80,"slug":93,"text":94},"the-computational-cost","The Computational Cost",{"depth":80,"slug":96,"text":97},"the-integration-problem","The Integration Problem",{"depth":37,"slug":99,"text":100},"rusts-role-safe-speed","Rust’s Role: Safe Speed",{"depth":37,"slug":102,"text":103},"stability-scale-and-surprises","Stability, Scale, and Surprises",[],[],{"title":59,"description":60,"pubDate":107,"tags":108,"draft":24},["Date","2025-09-24T00:00:00.000Z"],[63,64,65],[],"rust-n-body.md"]